@page "/fetchdata"
@inject AdminClient AdminClient

<PageTitle>Users</PageTitle>

<h1>Users</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (_users == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>User ID</th>
            <th>First Name</th>
            <th>Email</th>
            <th>Active</th>
            <th>Admin</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var user in _users)
        {
            <tr>
                <td>@user.Id</td>
                <td>@user.FirstName</td>
                <td>@user.Email</td>
                <td>
                    <DemoButton Primary="user.Active" OnClick="() => ToggleActive(user.Id, user.Active)">
                        @user.Active.ToString()
                    </DemoButton>
                </td>
                <td>
                    <DemoButton Primary="user.Admin" OnClick="() => ToggleAdmin(user.Id, user.Admin)">
                        @user.Admin.ToString()
                    </DemoButton>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private User[]? _users;

    protected override async Task OnInitializedAsync()
    {
        var result = await AdminClient.GetUsersStartingWith.ExecuteAsync("S");
        _users = result.Data?.Users
            .Select(x => new User
            {
                Id = x.Id,
                FirstName = x.FirstName,
                Email = x.Email,
                Active = x.Active,
                Admin = x.Admin
            })
            .ToArray();
    }

    private async Task ToggleAdmin(int userId, bool currentAdmin)
    {
        var result = await AdminClient.SetUserAdmin.ExecuteAsync(userId, !currentAdmin);
        if (result.Data?.UserAdminSet.User is null) return;
        _users!.First(x => x.Id == userId).Admin = result.Data.UserAdminSet.User.Admin;
    }

    private async Task ToggleActive(int userId, bool currentActive)
    {
        var result = await AdminClient.SetUserActive.ExecuteAsync(userId, !currentActive);
        if (result.Data?.UserActiveSet.User is null) return;
        _users!.First(x => x.Id == userId).Active = result.Data.UserActiveSet.User.Active;
    }

    private class User
    {
        public int Id { get; init; }
        public required string FirstName { get; init; }
        public required string Email { get; init; }
        public bool Active { get; set; }
        public bool Admin { get; set; }
    }

}