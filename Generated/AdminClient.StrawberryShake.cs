// <auto-generated/>
#nullable enable

namespace BlazorApp1
{
    /// <summary>
    /// GraphQL queries.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetAllUsersResult : global::System.IEquatable<GetAllUsersResult>, IGetAllUsersResult
    {
        public GetAllUsersResult(global::System.Collections.Generic.IReadOnlyList<global::BlazorApp1.IGetAllUsers_Users> users)
        {
            Users = users;
        }

        /// <summary>
        /// Get any and all users, supports filtering and sorting.
        /// 
        /// 
        /// **Returns:**
        /// List of users.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::BlazorApp1.IGetAllUsers_Users> Users { get; }

        public virtual global::System.Boolean Equals(GetAllUsersResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Users, other.Users));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAllUsersResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Users_elm in Users)
                {
                    hash ^= 397 * Users_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// The users of our application.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetAllUsers_Users_User : global::System.IEquatable<GetAllUsers_Users_User>, IGetAllUsers_Users_User
    {
        public GetAllUsers_Users_User(global::System.Int32 id, global::System.String email, global::System.Boolean active, global::System.Boolean admin)
        {
            Id = id;
            Email = email;
            Active = active;
            Admin = admin;
        }

        /// <summary>
        /// Primary key.
        /// </summary>
        public global::System.Int32 Id { get; }

        /// <summary>
        /// Valid email address.
        /// </summary>
        public global::System.String Email { get; }

        /// <summary>
        /// Is this user account active.
        /// </summary>
        public global::System.Boolean Active { get; }

        /// <summary>
        /// Is this user an admin.
        /// </summary>
        public global::System.Boolean Admin { get; }

        public virtual global::System.Boolean Equals(GetAllUsers_Users_User? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && Email.Equals(other.Email) && Active == other.Active && Admin == other.Admin;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAllUsers_Users_User)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Email.GetHashCode();
                hash ^= 397 * Active.GetHashCode();
                hash ^= 397 * Admin.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// GraphQL queries.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetAllUsersResult
    {
        /// <summary>
        /// Get any and all users, supports filtering and sorting.
        /// 
        /// 
        /// **Returns:**
        /// List of users.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::BlazorApp1.IGetAllUsers_Users> Users { get; }
    }

    /// <summary>
    /// The users of our application.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetAllUsers_Users
    {
        /// <summary>
        /// Primary key.
        /// </summary>
        public global::System.Int32 Id { get; }

        /// <summary>
        /// Valid email address.
        /// </summary>
        public global::System.String Email { get; }

        /// <summary>
        /// Is this user account active.
        /// </summary>
        public global::System.Boolean Active { get; }

        /// <summary>
        /// Is this user an admin.
        /// </summary>
        public global::System.Boolean Admin { get; }
    }

    /// <summary>
    /// The users of our application.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetAllUsers_Users_User : IGetAllUsers_Users
    {
    }

    /// <summary>
    /// GraphQL queries.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetUsersStartingWithResult : global::System.IEquatable<GetUsersStartingWithResult>, IGetUsersStartingWithResult
    {
        public GetUsersStartingWithResult(global::System.Collections.Generic.IReadOnlyList<global::BlazorApp1.IGetUsersStartingWith_Users> users)
        {
            Users = users;
        }

        /// <summary>
        /// Get any and all users, supports filtering and sorting.
        /// 
        /// 
        /// **Returns:**
        /// List of users.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::BlazorApp1.IGetUsersStartingWith_Users> Users { get; }

        public virtual global::System.Boolean Equals(GetUsersStartingWithResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Users, other.Users));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetUsersStartingWithResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Users_elm in Users)
                {
                    hash ^= 397 * Users_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// The users of our application.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetUsersStartingWith_Users_User : global::System.IEquatable<GetUsersStartingWith_Users_User>, IGetUsersStartingWith_Users_User
    {
        public GetUsersStartingWith_Users_User(global::System.Int32 id, global::System.String firstName, global::System.String email, global::System.Boolean active, global::System.Boolean admin)
        {
            Id = id;
            FirstName = firstName;
            Email = email;
            Active = active;
            Admin = admin;
        }

        /// <summary>
        /// Primary key.
        /// </summary>
        public global::System.Int32 Id { get; }

        /// <summary>
        /// Legal first name.
        /// </summary>
        public global::System.String FirstName { get; }

        /// <summary>
        /// Valid email address.
        /// </summary>
        public global::System.String Email { get; }

        /// <summary>
        /// Is this user account active.
        /// </summary>
        public global::System.Boolean Active { get; }

        /// <summary>
        /// Is this user an admin.
        /// </summary>
        public global::System.Boolean Admin { get; }

        public virtual global::System.Boolean Equals(GetUsersStartingWith_Users_User? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && FirstName.Equals(other.FirstName) && Email.Equals(other.Email) && Active == other.Active && Admin == other.Admin;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetUsersStartingWith_Users_User)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * FirstName.GetHashCode();
                hash ^= 397 * Email.GetHashCode();
                hash ^= 397 * Active.GetHashCode();
                hash ^= 397 * Admin.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// GraphQL queries.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetUsersStartingWithResult
    {
        /// <summary>
        /// Get any and all users, supports filtering and sorting.
        /// 
        /// 
        /// **Returns:**
        /// List of users.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::BlazorApp1.IGetUsersStartingWith_Users> Users { get; }
    }

    /// <summary>
    /// The users of our application.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetUsersStartingWith_Users
    {
        /// <summary>
        /// Primary key.
        /// </summary>
        public global::System.Int32 Id { get; }

        /// <summary>
        /// Legal first name.
        /// </summary>
        public global::System.String FirstName { get; }

        /// <summary>
        /// Valid email address.
        /// </summary>
        public global::System.String Email { get; }

        /// <summary>
        /// Is this user account active.
        /// </summary>
        public global::System.Boolean Active { get; }

        /// <summary>
        /// Is this user an admin.
        /// </summary>
        public global::System.Boolean Admin { get; }
    }

    /// <summary>
    /// The users of our application.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetUsersStartingWith_Users_User : IGetUsersStartingWith_Users
    {
    }

    /// <summary>
    /// GraphQL mutations.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class SetUserActiveResult : global::System.IEquatable<SetUserActiveResult>, ISetUserActiveResult
    {
        public SetUserActiveResult(global::BlazorApp1.ISetUserActive_UserActiveSet userActiveSet)
        {
            UserActiveSet = userActiveSet;
        }

        /// <summary>
        /// Activate/deactivate user with provided user ID.
        /// 
        /// 
        /// **Returns:**
        /// Updated user.
        /// </summary>
        public global::BlazorApp1.ISetUserActive_UserActiveSet UserActiveSet { get; }

        public virtual global::System.Boolean Equals(SetUserActiveResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (UserActiveSet.Equals(other.UserActiveSet));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((SetUserActiveResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * UserActiveSet.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class SetUserActive_UserActiveSet_UserActiveSetPayload : global::System.IEquatable<SetUserActive_UserActiveSet_UserActiveSetPayload>, ISetUserActive_UserActiveSet_UserActiveSetPayload
    {
        public SetUserActive_UserActiveSet_UserActiveSetPayload(global::BlazorApp1.ISetUserActive_UserActiveSet_User? user)
        {
            User = user;
        }

        public global::BlazorApp1.ISetUserActive_UserActiveSet_User? User { get; }

        public virtual global::System.Boolean Equals(SetUserActive_UserActiveSet_UserActiveSetPayload? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((User is null && other.User is null) || User != null && User.Equals(other.User)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((SetUserActive_UserActiveSet_UserActiveSetPayload)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (User != null)
                {
                    hash ^= 397 * User.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// The users of our application.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class SetUserActive_UserActiveSet_User_User : global::System.IEquatable<SetUserActive_UserActiveSet_User_User>, ISetUserActive_UserActiveSet_User_User
    {
        public SetUserActive_UserActiveSet_User_User(global::System.Boolean active)
        {
            Active = active;
        }

        /// <summary>
        /// Is this user account active.
        /// </summary>
        public global::System.Boolean Active { get; }

        public virtual global::System.Boolean Equals(SetUserActive_UserActiveSet_User_User? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Active == other.Active);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((SetUserActive_UserActiveSet_User_User)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Active.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// GraphQL mutations.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface ISetUserActiveResult
    {
        /// <summary>
        /// Activate/deactivate user with provided user ID.
        /// 
        /// 
        /// **Returns:**
        /// Updated user.
        /// </summary>
        public global::BlazorApp1.ISetUserActive_UserActiveSet UserActiveSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface ISetUserActive_UserActiveSet
    {
        public global::BlazorApp1.ISetUserActive_UserActiveSet_User? User { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface ISetUserActive_UserActiveSet_UserActiveSetPayload : ISetUserActive_UserActiveSet
    {
    }

    /// <summary>
    /// The users of our application.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface ISetUserActive_UserActiveSet_User
    {
        /// <summary>
        /// Is this user account active.
        /// </summary>
        public global::System.Boolean Active { get; }
    }

    /// <summary>
    /// The users of our application.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface ISetUserActive_UserActiveSet_User_User : ISetUserActive_UserActiveSet_User
    {
    }

    /// <summary>
    /// GraphQL mutations.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class SetUserAdminResult : global::System.IEquatable<SetUserAdminResult>, ISetUserAdminResult
    {
        public SetUserAdminResult(global::BlazorApp1.ISetUserAdmin_UserAdminSet userAdminSet)
        {
            UserAdminSet = userAdminSet;
        }

        /// <summary>
        /// Enable/disable admin for user with provided user ID.
        /// 
        /// 
        /// **Returns:**
        /// Updated user.
        /// </summary>
        public global::BlazorApp1.ISetUserAdmin_UserAdminSet UserAdminSet { get; }

        public virtual global::System.Boolean Equals(SetUserAdminResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (UserAdminSet.Equals(other.UserAdminSet));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((SetUserAdminResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * UserAdminSet.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class SetUserAdmin_UserAdminSet_UserAdminSetPayload : global::System.IEquatable<SetUserAdmin_UserAdminSet_UserAdminSetPayload>, ISetUserAdmin_UserAdminSet_UserAdminSetPayload
    {
        public SetUserAdmin_UserAdminSet_UserAdminSetPayload(global::BlazorApp1.ISetUserAdmin_UserAdminSet_User? user)
        {
            User = user;
        }

        public global::BlazorApp1.ISetUserAdmin_UserAdminSet_User? User { get; }

        public virtual global::System.Boolean Equals(SetUserAdmin_UserAdminSet_UserAdminSetPayload? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((User is null && other.User is null) || User != null && User.Equals(other.User)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((SetUserAdmin_UserAdminSet_UserAdminSetPayload)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (User != null)
                {
                    hash ^= 397 * User.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// The users of our application.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class SetUserAdmin_UserAdminSet_User_User : global::System.IEquatable<SetUserAdmin_UserAdminSet_User_User>, ISetUserAdmin_UserAdminSet_User_User
    {
        public SetUserAdmin_UserAdminSet_User_User(global::System.Boolean admin)
        {
            Admin = admin;
        }

        /// <summary>
        /// Is this user an admin.
        /// </summary>
        public global::System.Boolean Admin { get; }

        public virtual global::System.Boolean Equals(SetUserAdmin_UserAdminSet_User_User? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Admin == other.Admin);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((SetUserAdmin_UserAdminSet_User_User)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Admin.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// GraphQL mutations.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface ISetUserAdminResult
    {
        /// <summary>
        /// Enable/disable admin for user with provided user ID.
        /// 
        /// 
        /// **Returns:**
        /// Updated user.
        /// </summary>
        public global::BlazorApp1.ISetUserAdmin_UserAdminSet UserAdminSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface ISetUserAdmin_UserAdminSet
    {
        public global::BlazorApp1.ISetUserAdmin_UserAdminSet_User? User { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface ISetUserAdmin_UserAdminSet_UserAdminSetPayload : ISetUserAdmin_UserAdminSet
    {
    }

    /// <summary>
    /// The users of our application.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface ISetUserAdmin_UserAdminSet_User
    {
        /// <summary>
        /// Is this user an admin.
        /// </summary>
        public global::System.Boolean Admin { get; }
    }

    /// <summary>
    /// The users of our application.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface ISetUserAdmin_UserAdminSet_User_User : ISetUserAdmin_UserAdminSet_User
    {
    }

    /// <summary>
    /// Represents the operation service of the GetAllUsers GraphQL operation
    /// <code>
    /// query GetAllUsers {
    ///   users {
    ///     __typename
    ///     id
    ///     email
    ///     active
    ///     admin
    ///     ... on User {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetAllUsersQueryDocument : global::StrawberryShake.IDocument
    {
        private GetAllUsersQueryDocument()
        {
        }

        public static GetAllUsersQueryDocument Instance { get; } = new GetAllUsersQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x20, 0x7b, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x55, 0x73, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "0ed463faf4945ddc905486415d66dcb5");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetAllUsers GraphQL operation
    /// <code>
    /// query GetAllUsers {
    ///   users {
    ///     __typename
    ///     id
    ///     email
    ///     active
    ///     admin
    ///     ... on User {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetAllUsersQuery : global::BlazorApp1.IGetAllUsersQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetAllUsersResult> _operationExecutor;
        public GetAllUsersQuery(global::StrawberryShake.IOperationExecutor<IGetAllUsersResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetAllUsersResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetAllUsersResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetAllUsersResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetAllUsersQueryDocument.Instance.Hash.Value, name: "GetAllUsers", document: GetAllUsersQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetAllUsers GraphQL operation
    /// <code>
    /// query GetAllUsers {
    ///   users {
    ///     __typename
    ///     id
    ///     email
    ///     active
    ///     admin
    ///     ... on User {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetAllUsersQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetAllUsersResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetAllUsersResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetUsersStartingWith GraphQL operation
    /// <code>
    /// query GetUsersStartingWith($prefix: String) {
    ///   users(where: { and: [ { firstName: { startsWith: $prefix } } ] }, order: [ { firstName: ASC } ]) {
    ///     __typename
    ///     id
    ///     firstName
    ///     email
    ///     active
    ///     admin
    ///     ... on User {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetUsersStartingWithQueryDocument : global::StrawberryShake.IDocument
    {
        private GetUsersStartingWithQueryDocument()
        {
        }

        public static GetUsersStartingWithQueryDocument Instance { get; } = new GetUsersStartingWithQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x28, 0x24, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x29, 0x20, 0x7b, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x28, 0x77, 0x68, 0x65, 0x72, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x61, 0x6e, 0x64, 0x3a, 0x20, 0x5b, 0x20, 0x7b, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x3a, 0x20, 0x24, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x5d, 0x20, 0x7d, 0x2c, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x20, 0x5b, 0x20, 0x7b, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x41, 0x53, 0x43, 0x20, 0x7d, 0x20, 0x5d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x55, 0x73, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "c3424fc7ba5143bd4cefcb949d6a30e0");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetUsersStartingWith GraphQL operation
    /// <code>
    /// query GetUsersStartingWith($prefix: String) {
    ///   users(where: { and: [ { firstName: { startsWith: $prefix } } ] }, order: [ { firstName: ASC } ]) {
    ///     __typename
    ///     id
    ///     firstName
    ///     email
    ///     active
    ///     admin
    ///     ... on User {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetUsersStartingWithQuery : global::BlazorApp1.IGetUsersStartingWithQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetUsersStartingWithResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public GetUsersStartingWithQuery(global::StrawberryShake.IOperationExecutor<IGetUsersStartingWithResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetUsersStartingWithResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetUsersStartingWithResult>> ExecuteAsync(global::System.String? prefix, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(prefix);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetUsersStartingWithResult>> Watch(global::System.String? prefix, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(prefix);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String? prefix)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("prefix", FormatPrefix(prefix));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetUsersStartingWithQueryDocument.Instance.Hash.Value, name: "GetUsersStartingWith", document: GetUsersStartingWithQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatPrefix(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetUsersStartingWith GraphQL operation
    /// <code>
    /// query GetUsersStartingWith($prefix: String) {
    ///   users(where: { and: [ { firstName: { startsWith: $prefix } } ] }, order: [ { firstName: ASC } ]) {
    ///     __typename
    ///     id
    ///     firstName
    ///     email
    ///     active
    ///     admin
    ///     ... on User {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetUsersStartingWithQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetUsersStartingWithResult>> ExecuteAsync(global::System.String? prefix, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetUsersStartingWithResult>> Watch(global::System.String? prefix, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the SetUserActive GraphQL operation
    /// <code>
    /// mutation SetUserActive($userId: Int!, $active: Boolean!) {
    ///   userActiveSet(input: { userId: $userId, active: $active }) {
    ///     __typename
    ///     user {
    ///       __typename
    ///       active
    ///       ... on User {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class SetUserActiveMutationDocument : global::StrawberryShake.IDocument
    {
        private SetUserActiveMutationDocument()
        {
        }

        public static SetUserActiveMutationDocument Instance { get; } = new SetUserActiveMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x28, 0x24, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x3a, 0x20, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x75, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x65, 0x74, 0x28, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x20, 0x7b, 0x20, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x2c, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x3a, 0x20, 0x24, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x55, 0x73, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "494114fb66dfa5e1682c032f3fc69471");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the SetUserActive GraphQL operation
    /// <code>
    /// mutation SetUserActive($userId: Int!, $active: Boolean!) {
    ///   userActiveSet(input: { userId: $userId, active: $active }) {
    ///     __typename
    ///     user {
    ///       __typename
    ///       active
    ///       ... on User {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class SetUserActiveMutation : global::BlazorApp1.ISetUserActiveMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<ISetUserActiveResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _booleanFormatter;
        public SetUserActiveMutation(global::StrawberryShake.IOperationExecutor<ISetUserActiveResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _booleanFormatter = serializerResolver.GetInputValueFormatter("Boolean");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(ISetUserActiveResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ISetUserActiveResult>> ExecuteAsync(global::System.Int32 userId, global::System.Boolean active, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(userId, active);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<ISetUserActiveResult>> Watch(global::System.Int32 userId, global::System.Boolean active, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(userId, active);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 userId, global::System.Boolean active)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("userId", FormatUserId(userId));
            variables.Add("active", FormatActive(active));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: SetUserActiveMutationDocument.Instance.Hash.Value, name: "SetUserActive", document: SetUserActiveMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatUserId(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatActive(global::System.Boolean value)
        {
            return _booleanFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the SetUserActive GraphQL operation
    /// <code>
    /// mutation SetUserActive($userId: Int!, $active: Boolean!) {
    ///   userActiveSet(input: { userId: $userId, active: $active }) {
    ///     __typename
    ///     user {
    ///       __typename
    ///       active
    ///       ... on User {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface ISetUserActiveMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ISetUserActiveResult>> ExecuteAsync(global::System.Int32 userId, global::System.Boolean active, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<ISetUserActiveResult>> Watch(global::System.Int32 userId, global::System.Boolean active, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the SetUserAdmin GraphQL operation
    /// <code>
    /// mutation SetUserAdmin($userId: Int!, $admin: Boolean!) {
    ///   userAdminSet(input: { userId: $userId, admin: $admin }) {
    ///     __typename
    ///     user {
    ///       __typename
    ///       admin
    ///       ... on User {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class SetUserAdminMutationDocument : global::StrawberryShake.IDocument
    {
        private SetUserAdminMutationDocument()
        {
        }

        public static SetUserAdminMutationDocument Instance { get; } = new SetUserAdminMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x28, 0x24, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x3a, 0x20, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x75, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x28, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x20, 0x7b, 0x20, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x2c, 0x20, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x3a, 0x20, 0x24, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x55, 0x73, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "50b96c736c062965f676213815129d55");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the SetUserAdmin GraphQL operation
    /// <code>
    /// mutation SetUserAdmin($userId: Int!, $admin: Boolean!) {
    ///   userAdminSet(input: { userId: $userId, admin: $admin }) {
    ///     __typename
    ///     user {
    ///       __typename
    ///       admin
    ///       ... on User {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class SetUserAdminMutation : global::BlazorApp1.ISetUserAdminMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<ISetUserAdminResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _booleanFormatter;
        public SetUserAdminMutation(global::StrawberryShake.IOperationExecutor<ISetUserAdminResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _booleanFormatter = serializerResolver.GetInputValueFormatter("Boolean");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(ISetUserAdminResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ISetUserAdminResult>> ExecuteAsync(global::System.Int32 userId, global::System.Boolean admin, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(userId, admin);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<ISetUserAdminResult>> Watch(global::System.Int32 userId, global::System.Boolean admin, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(userId, admin);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 userId, global::System.Boolean admin)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("userId", FormatUserId(userId));
            variables.Add("admin", FormatAdmin(admin));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: SetUserAdminMutationDocument.Instance.Hash.Value, name: "SetUserAdmin", document: SetUserAdminMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatUserId(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatAdmin(global::System.Boolean value)
        {
            return _booleanFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the SetUserAdmin GraphQL operation
    /// <code>
    /// mutation SetUserAdmin($userId: Int!, $admin: Boolean!) {
    ///   userAdminSet(input: { userId: $userId, admin: $admin }) {
    ///     __typename
    ///     user {
    ///       __typename
    ///       admin
    ///       ... on User {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface ISetUserAdminMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ISetUserAdminResult>> ExecuteAsync(global::System.Int32 userId, global::System.Boolean admin, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<ISetUserAdminResult>> Watch(global::System.Int32 userId, global::System.Boolean admin, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the AdminClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class AdminClient : global::BlazorApp1.IAdminClient
    {
        private readonly global::BlazorApp1.IGetAllUsersQuery _getAllUsers;
        private readonly global::BlazorApp1.IGetUsersStartingWithQuery _getUsersStartingWith;
        private readonly global::BlazorApp1.ISetUserActiveMutation _setUserActive;
        private readonly global::BlazorApp1.ISetUserAdminMutation _setUserAdmin;
        public AdminClient(global::BlazorApp1.IGetAllUsersQuery getAllUsers, global::BlazorApp1.IGetUsersStartingWithQuery getUsersStartingWith, global::BlazorApp1.ISetUserActiveMutation setUserActive, global::BlazorApp1.ISetUserAdminMutation setUserAdmin)
        {
            _getAllUsers = getAllUsers ?? throw new global::System.ArgumentNullException(nameof(getAllUsers));
            _getUsersStartingWith = getUsersStartingWith ?? throw new global::System.ArgumentNullException(nameof(getUsersStartingWith));
            _setUserActive = setUserActive ?? throw new global::System.ArgumentNullException(nameof(setUserActive));
            _setUserAdmin = setUserAdmin ?? throw new global::System.ArgumentNullException(nameof(setUserAdmin));
        }

        public static global::System.String ClientName => "AdminClient";
        public global::BlazorApp1.IGetAllUsersQuery GetAllUsers => _getAllUsers;
        public global::BlazorApp1.IGetUsersStartingWithQuery GetUsersStartingWith => _getUsersStartingWith;
        public global::BlazorApp1.ISetUserActiveMutation SetUserActive => _setUserActive;
        public global::BlazorApp1.ISetUserAdminMutation SetUserAdmin => _setUserAdmin;
    }

    /// <summary>
    /// Represents the AdminClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IAdminClient
    {
        global::BlazorApp1.IGetAllUsersQuery GetAllUsers { get; }

        global::BlazorApp1.IGetUsersStartingWithQuery GetUsersStartingWith { get; }

        global::BlazorApp1.ISetUserActiveMutation SetUserActive { get; }

        global::BlazorApp1.ISetUserAdminMutation SetUserAdmin { get; }
    }
}

namespace BlazorApp1.State
{
    ///<summary>The users of our application.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class UserEntity
    {
        public UserEntity(global::System.Int32 id = default !, global::System.String email = default !, global::System.Boolean active = default !, global::System.Boolean admin = default !, global::System.String firstName = default !)
        {
            Id = id;
            Email = email;
            Active = active;
            Admin = admin;
            FirstName = firstName;
        }

        ///<summary>Primary key.</summary>
        public global::System.Int32 Id { get; }

        ///<summary>Valid email address.</summary>
        public global::System.String Email { get; }

        ///<summary>Is this user account active.</summary>
        public global::System.Boolean Active { get; }

        ///<summary>Is this user an admin.</summary>
        public global::System.Boolean Admin { get; }

        ///<summary>Legal first name.</summary>
        public global::System.String FirstName { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetAllUsersResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::BlazorApp1.GetAllUsersResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::BlazorApp1.State.UserEntity, GetAllUsers_Users_User> _getAllUsers_Users_UserFromUserEntityMapper;
        public GetAllUsersResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::BlazorApp1.State.UserEntity, GetAllUsers_Users_User> getAllUsers_Users_UserFromUserEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getAllUsers_Users_UserFromUserEntityMapper = getAllUsers_Users_UserFromUserEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getAllUsers_Users_UserFromUserEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::BlazorApp1.IGetAllUsersResult);
        public GetAllUsersResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetAllUsersResultInfo info)
            {
                return new GetAllUsersResult(MapNonNullableIGetAllUsers_UsersNonNullableArray(info.Users, snapshot));
            }

            throw new global::System.ArgumentException("GetAllUsersResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::BlazorApp1.IGetAllUsers_Users> MapNonNullableIGetAllUsers_UsersNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var users = new global::System.Collections.Generic.List<global::BlazorApp1.IGetAllUsers_Users>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                users.Add(MapNonNullableIGetAllUsers_Users(child, snapshot));
            }

            return users;
        }

        private global::BlazorApp1.IGetAllUsers_Users MapNonNullableIGetAllUsers_Users(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("User", global::System.StringComparison.Ordinal))
            {
                return _getAllUsers_Users_UserFromUserEntityMapper.Map(snapshot.GetEntity<global::BlazorApp1.State.UserEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetAllUsersResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetAllUsersResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> users, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Users = users;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Get any and all users, supports filtering and sorting.
        /// 
        /// 
        /// **Returns:**
        /// List of users.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Users { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetAllUsersResultInfo(Users, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetAllUsers_Users_UserFromUserEntityMapper : global::StrawberryShake.IEntityMapper<global::BlazorApp1.State.UserEntity, GetAllUsers_Users_User>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetAllUsers_Users_UserFromUserEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetAllUsers_Users_User Map(global::BlazorApp1.State.UserEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetAllUsers_Users_User(entity.Id, entity.Email, entity.Active, entity.Admin);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetUsersStartingWithResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::BlazorApp1.GetUsersStartingWithResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::BlazorApp1.State.UserEntity, GetUsersStartingWith_Users_User> _getUsersStartingWith_Users_UserFromUserEntityMapper;
        public GetUsersStartingWithResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::BlazorApp1.State.UserEntity, GetUsersStartingWith_Users_User> getUsersStartingWith_Users_UserFromUserEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getUsersStartingWith_Users_UserFromUserEntityMapper = getUsersStartingWith_Users_UserFromUserEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getUsersStartingWith_Users_UserFromUserEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::BlazorApp1.IGetUsersStartingWithResult);
        public GetUsersStartingWithResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetUsersStartingWithResultInfo info)
            {
                return new GetUsersStartingWithResult(MapNonNullableIGetUsersStartingWith_UsersNonNullableArray(info.Users, snapshot));
            }

            throw new global::System.ArgumentException("GetUsersStartingWithResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::BlazorApp1.IGetUsersStartingWith_Users> MapNonNullableIGetUsersStartingWith_UsersNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var users = new global::System.Collections.Generic.List<global::BlazorApp1.IGetUsersStartingWith_Users>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                users.Add(MapNonNullableIGetUsersStartingWith_Users(child, snapshot));
            }

            return users;
        }

        private global::BlazorApp1.IGetUsersStartingWith_Users MapNonNullableIGetUsersStartingWith_Users(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("User", global::System.StringComparison.Ordinal))
            {
                return _getUsersStartingWith_Users_UserFromUserEntityMapper.Map(snapshot.GetEntity<global::BlazorApp1.State.UserEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetUsersStartingWithResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetUsersStartingWithResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> users, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Users = users;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Get any and all users, supports filtering and sorting.
        /// 
        /// 
        /// **Returns:**
        /// List of users.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Users { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetUsersStartingWithResultInfo(Users, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetUsersStartingWith_Users_UserFromUserEntityMapper : global::StrawberryShake.IEntityMapper<global::BlazorApp1.State.UserEntity, GetUsersStartingWith_Users_User>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetUsersStartingWith_Users_UserFromUserEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetUsersStartingWith_Users_User Map(global::BlazorApp1.State.UserEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetUsersStartingWith_Users_User(entity.Id, entity.FirstName, entity.Email, entity.Active, entity.Admin);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class SetUserActiveResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::BlazorApp1.SetUserActiveResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::BlazorApp1.State.UserEntity, SetUserActive_UserActiveSet_User_User> _setUserActive_UserActiveSet_User_UserFromUserEntityMapper;
        public SetUserActiveResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::BlazorApp1.State.UserEntity, SetUserActive_UserActiveSet_User_User> setUserActive_UserActiveSet_User_UserFromUserEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _setUserActive_UserActiveSet_User_UserFromUserEntityMapper = setUserActive_UserActiveSet_User_UserFromUserEntityMapper ?? throw new global::System.ArgumentNullException(nameof(setUserActive_UserActiveSet_User_UserFromUserEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::BlazorApp1.ISetUserActiveResult);
        public SetUserActiveResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is SetUserActiveResultInfo info)
            {
                return new SetUserActiveResult(MapNonNullableISetUserActive_UserActiveSet(info.UserActiveSet, snapshot));
            }

            throw new global::System.ArgumentException("SetUserActiveResultInfo expected.");
        }

        private global::BlazorApp1.ISetUserActive_UserActiveSet MapNonNullableISetUserActive_UserActiveSet(global::BlazorApp1.State.UserActiveSetPayloadData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            ISetUserActive_UserActiveSet returnValue = default !;
            if (data.__typename.Equals("UserActiveSetPayload", global::System.StringComparison.Ordinal))
            {
                returnValue = new SetUserActive_UserActiveSet_UserActiveSetPayload(MapISetUserActive_UserActiveSet_User(data.User, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::BlazorApp1.ISetUserActive_UserActiveSet_User? MapISetUserActive_UserActiveSet_User(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("User", global::System.StringComparison.Ordinal))
            {
                return _setUserActive_UserActiveSet_User_UserFromUserEntityMapper.Map(snapshot.GetEntity<global::BlazorApp1.State.UserEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class SetUserActiveResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public SetUserActiveResultInfo(global::BlazorApp1.State.UserActiveSetPayloadData userActiveSet, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            UserActiveSet = userActiveSet;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Activate/deactivate user with provided user ID.
        /// 
        /// 
        /// **Returns:**
        /// Updated user.
        /// </summary>
        public global::BlazorApp1.State.UserActiveSetPayloadData UserActiveSet { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new SetUserActiveResultInfo(UserActiveSet, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class SetUserActive_UserActiveSet_User_UserFromUserEntityMapper : global::StrawberryShake.IEntityMapper<global::BlazorApp1.State.UserEntity, SetUserActive_UserActiveSet_User_User>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public SetUserActive_UserActiveSet_User_UserFromUserEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public SetUserActive_UserActiveSet_User_User Map(global::BlazorApp1.State.UserEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new SetUserActive_UserActiveSet_User_User(entity.Active);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class SetUserAdminResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::BlazorApp1.SetUserAdminResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::BlazorApp1.State.UserEntity, SetUserAdmin_UserAdminSet_User_User> _setUserAdmin_UserAdminSet_User_UserFromUserEntityMapper;
        public SetUserAdminResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::BlazorApp1.State.UserEntity, SetUserAdmin_UserAdminSet_User_User> setUserAdmin_UserAdminSet_User_UserFromUserEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _setUserAdmin_UserAdminSet_User_UserFromUserEntityMapper = setUserAdmin_UserAdminSet_User_UserFromUserEntityMapper ?? throw new global::System.ArgumentNullException(nameof(setUserAdmin_UserAdminSet_User_UserFromUserEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::BlazorApp1.ISetUserAdminResult);
        public SetUserAdminResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is SetUserAdminResultInfo info)
            {
                return new SetUserAdminResult(MapNonNullableISetUserAdmin_UserAdminSet(info.UserAdminSet, snapshot));
            }

            throw new global::System.ArgumentException("SetUserAdminResultInfo expected.");
        }

        private global::BlazorApp1.ISetUserAdmin_UserAdminSet MapNonNullableISetUserAdmin_UserAdminSet(global::BlazorApp1.State.UserAdminSetPayloadData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            ISetUserAdmin_UserAdminSet returnValue = default !;
            if (data.__typename.Equals("UserAdminSetPayload", global::System.StringComparison.Ordinal))
            {
                returnValue = new SetUserAdmin_UserAdminSet_UserAdminSetPayload(MapISetUserAdmin_UserAdminSet_User(data.User, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::BlazorApp1.ISetUserAdmin_UserAdminSet_User? MapISetUserAdmin_UserAdminSet_User(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("User", global::System.StringComparison.Ordinal))
            {
                return _setUserAdmin_UserAdminSet_User_UserFromUserEntityMapper.Map(snapshot.GetEntity<global::BlazorApp1.State.UserEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class SetUserAdminResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public SetUserAdminResultInfo(global::BlazorApp1.State.UserAdminSetPayloadData userAdminSet, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            UserAdminSet = userAdminSet;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Enable/disable admin for user with provided user ID.
        /// 
        /// 
        /// **Returns:**
        /// Updated user.
        /// </summary>
        public global::BlazorApp1.State.UserAdminSetPayloadData UserAdminSet { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new SetUserAdminResultInfo(UserAdminSet, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class SetUserAdmin_UserAdminSet_User_UserFromUserEntityMapper : global::StrawberryShake.IEntityMapper<global::BlazorApp1.State.UserEntity, SetUserAdmin_UserAdminSet_User_User>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public SetUserAdmin_UserAdminSet_User_UserFromUserEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public SetUserAdmin_UserAdminSet_User_User Map(global::BlazorApp1.State.UserEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new SetUserAdmin_UserAdminSet_User_User(entity.Admin);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetAllUsersBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::BlazorApp1.IGetAllUsersResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::BlazorApp1.IGetAllUsersResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public GetAllUsersBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::BlazorApp1.IGetAllUsersResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetAllUsersResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetAllUsersResult Result, GetAllUsersResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetAllUsersResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetAllUsersResult, GetAllUsersResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> usersId = default !;
            _entityStore.Update(session =>
            {
                usersId = UpdateNonNullableIGetAllUsers_UsersEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "users"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetAllUsersResultInfo(usersId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetAllUsers_UsersEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var users = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                users.Add(UpdateNonNullableIGetAllUsers_UsersEntity(session, child, entityIds));
            }

            return users;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetAllUsers_UsersEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("User", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::BlazorApp1.State.UserEntity? entity))
                {
                    session.SetEntity(entityId, new global::BlazorApp1.State.UserEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "email")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "active")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "admin")), entity.FirstName));
                }
                else
                {
                    session.SetEntity(entityId, new global::BlazorApp1.State.UserEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "email")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "active")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "admin")), default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetUsersStartingWithBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::BlazorApp1.IGetUsersStartingWithResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::BlazorApp1.IGetUsersStartingWithResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public GetUsersStartingWithBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::BlazorApp1.IGetUsersStartingWithResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetUsersStartingWithResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetUsersStartingWithResult Result, GetUsersStartingWithResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetUsersStartingWithResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetUsersStartingWithResult, GetUsersStartingWithResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> usersId = default !;
            _entityStore.Update(session =>
            {
                usersId = UpdateNonNullableIGetUsersStartingWith_UsersEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "users"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetUsersStartingWithResultInfo(usersId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetUsersStartingWith_UsersEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var users = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                users.Add(UpdateNonNullableIGetUsersStartingWith_UsersEntity(session, child, entityIds));
            }

            return users;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetUsersStartingWith_UsersEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("User", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::BlazorApp1.State.UserEntity? entity))
                {
                    session.SetEntity(entityId, new global::BlazorApp1.State.UserEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "email")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "active")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "admin")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "firstName"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::BlazorApp1.State.UserEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "email")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "active")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "admin")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "firstName"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class SetUserActiveBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::BlazorApp1.ISetUserActiveResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::BlazorApp1.ISetUserActiveResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public SetUserActiveBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::BlazorApp1.ISetUserActiveResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<ISetUserActiveResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (ISetUserActiveResult Result, SetUserActiveResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<ISetUserActiveResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (ISetUserActiveResult, SetUserActiveResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::BlazorApp1.State.UserActiveSetPayloadData userActiveSetId = default !;
            _entityStore.Update(session =>
            {
                userActiveSetId = DeserializeNonNullableISetUserActive_UserActiveSet(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "userActiveSet"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new SetUserActiveResultInfo(userActiveSetId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::BlazorApp1.State.UserActiveSetPayloadData DeserializeNonNullableISetUserActive_UserActiveSet(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("UserActiveSetPayload", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::BlazorApp1.State.UserActiveSetPayloadData(typename, user: UpdateISetUserActive_UserActiveSet_UserEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "user"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateISetUserActive_UserActiveSet_UserEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("User", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::BlazorApp1.State.UserEntity? entity))
                {
                    session.SetEntity(entityId, new global::BlazorApp1.State.UserEntity(entity.Id, entity.Email, DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "active")), entity.Admin, entity.FirstName));
                }
                else
                {
                    session.SetEntity(entityId, new global::BlazorApp1.State.UserEntity(default !, default !, DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "active")), default !, default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class SetUserAdminBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::BlazorApp1.ISetUserAdminResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::BlazorApp1.ISetUserAdminResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public SetUserAdminBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::BlazorApp1.ISetUserAdminResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<ISetUserAdminResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (ISetUserAdminResult Result, SetUserAdminResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<ISetUserAdminResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (ISetUserAdminResult, SetUserAdminResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::BlazorApp1.State.UserAdminSetPayloadData userAdminSetId = default !;
            _entityStore.Update(session =>
            {
                userAdminSetId = DeserializeNonNullableISetUserAdmin_UserAdminSet(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "userAdminSet"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new SetUserAdminResultInfo(userAdminSetId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::BlazorApp1.State.UserAdminSetPayloadData DeserializeNonNullableISetUserAdmin_UserAdminSet(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("UserAdminSetPayload", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::BlazorApp1.State.UserAdminSetPayloadData(typename, user: UpdateISetUserAdmin_UserAdminSet_UserEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "user"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateISetUserAdmin_UserAdminSet_UserEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("User", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::BlazorApp1.State.UserEntity? entity))
                {
                    session.SetEntity(entityId, new global::BlazorApp1.State.UserEntity(entity.Id, entity.Email, entity.Active, DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "admin")), entity.FirstName));
                }
                else
                {
                    session.SetEntity(entityId, new global::BlazorApp1.State.UserEntity(default !, default !, default !, DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "admin")), default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class UserActiveSetPayloadData
    {
        public UserActiveSetPayloadData(global::System.String __typename, global::StrawberryShake.EntityId? user = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            User = user;
        }

        public global::System.String __typename { get; }

        public global::StrawberryShake.EntityId? User { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class UserAdminSetPayloadData
    {
        public UserAdminSetPayloadData(global::System.String __typename, global::StrawberryShake.EntityId? user = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            User = user;
        }

        public global::System.String __typename { get; }

        public global::StrawberryShake.EntityId? User { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class AdminClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                "User" => ParseUserEntityId(obj, __typename),
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                "User" => FormatUserEntityId(entityId),
                _ => throw new global::System.NotSupportedException()};
        }

        private global::StrawberryShake.EntityId ParseUserEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatUserEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class AdminClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public AdminClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public static partial class AdminClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::BlazorApp1.State.AdminClientStoreAccessor> AddAdminClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::BlazorApp1.State.AdminClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::BlazorApp1.GetAllUsersQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::BlazorApp1.GetUsersStartingWithQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::BlazorApp1.SetUserActiveMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::BlazorApp1.SetUserAdminMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::BlazorApp1.AdminClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::BlazorApp1.IAdminClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::BlazorApp1.State.AdminClientStoreAccessor>("AdminClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("AdminClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::BlazorApp1.State.UserEntity, global::BlazorApp1.GetAllUsers_Users_User>, global::BlazorApp1.State.GetAllUsers_Users_UserFromUserEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::BlazorApp1.State.UserEntity, global::BlazorApp1.GetUsersStartingWith_Users_User>, global::BlazorApp1.State.GetUsersStartingWith_Users_UserFromUserEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::BlazorApp1.State.UserEntity, global::BlazorApp1.SetUserActive_UserActiveSet_User_User>, global::BlazorApp1.State.SetUserActive_UserActiveSet_User_UserFromUserEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::BlazorApp1.State.UserEntity, global::BlazorApp1.SetUserAdmin_UserAdminSet_User_User>, global::BlazorApp1.State.SetUserAdmin_UserAdminSet_User_UserFromUserEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::BlazorApp1.IGetAllUsersResult>, global::BlazorApp1.State.GetAllUsersResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::BlazorApp1.IGetAllUsersResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::BlazorApp1.IGetAllUsersQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::BlazorApp1.IGetAllUsersResult>, global::BlazorApp1.State.GetAllUsersBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::BlazorApp1.IGetAllUsersResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::BlazorApp1.IGetAllUsersResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::BlazorApp1.IGetAllUsersResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::BlazorApp1.GetAllUsersQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::BlazorApp1.IGetAllUsersQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::BlazorApp1.GetAllUsersQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::BlazorApp1.IGetUsersStartingWithResult>, global::BlazorApp1.State.GetUsersStartingWithResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::BlazorApp1.IGetUsersStartingWithResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::BlazorApp1.IGetUsersStartingWithQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::BlazorApp1.IGetUsersStartingWithResult>, global::BlazorApp1.State.GetUsersStartingWithBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::BlazorApp1.IGetUsersStartingWithResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::BlazorApp1.IGetUsersStartingWithResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::BlazorApp1.IGetUsersStartingWithResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::BlazorApp1.GetUsersStartingWithQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::BlazorApp1.IGetUsersStartingWithQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::BlazorApp1.GetUsersStartingWithQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::BlazorApp1.ISetUserActiveResult>, global::BlazorApp1.State.SetUserActiveResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::BlazorApp1.ISetUserActiveResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::BlazorApp1.ISetUserActiveMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::BlazorApp1.ISetUserActiveResult>, global::BlazorApp1.State.SetUserActiveBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::BlazorApp1.ISetUserActiveResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::BlazorApp1.ISetUserActiveResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::BlazorApp1.ISetUserActiveResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::BlazorApp1.SetUserActiveMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::BlazorApp1.ISetUserActiveMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::BlazorApp1.SetUserActiveMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::BlazorApp1.ISetUserAdminResult>, global::BlazorApp1.State.SetUserAdminResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::BlazorApp1.ISetUserAdminResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::BlazorApp1.ISetUserAdminMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::BlazorApp1.ISetUserAdminResult>, global::BlazorApp1.State.SetUserAdminBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::BlazorApp1.ISetUserAdminResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::BlazorApp1.ISetUserAdminResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::BlazorApp1.ISetUserAdminResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::BlazorApp1.SetUserAdminMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::BlazorApp1.ISetUserAdminMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::BlazorApp1.SetUserAdminMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::BlazorApp1.State.AdminClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::BlazorApp1.AdminClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::BlazorApp1.IAdminClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::BlazorApp1.AdminClient>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}
